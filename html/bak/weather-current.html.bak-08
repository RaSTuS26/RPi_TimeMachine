<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://www.w3.org/2005/10/profile">
	<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
	<meta http-equiv="Pragma" content="no-cache" />
	<meta http-equiv="Expires" content="0" />
<!--	<meta http-equiv="refresh" content="300"> -->
	<title>RaSTuS' Joint - Current Weather Conditions</title>
	<link rel="stylesheet" type="text/css" href="css/date-time-weather.css"/>
	<meta charset="utf-8">
	<script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.min.js" type="text/javascript"></script>
<!--	<script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.js" type="text/javascript"></script> -->
	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!--	<script src="https://code.jquery.com/jquery-3.6.0.js"></script> -->

	<script type = "text/javascript" language = "javascript">
		var mqtt;
		var reconnectTimeout = 2000;
		var host="192.168.0.125";		// IP Address of MQTT Server (Websockets enabled) - Change This
		var port=9001;

		function onFailure(message) {
			console.log("Connection Attempt to Host "+host+"Failed");
			setTimeout(MQTTconnect, reconnectTimeout);
		}

		function onMessageArrived(msg){
			var message = msg.payloadString;
			var topic = msg.destinationName;
			out_msg="Message Received " + message + "    ";
			out_msg=out_msg + "Message Topic " + topic;
			console.log(out_msg);

// **** Date/Time calculated by '/home/pi/.bin/oh2_weewxDateTimeFormattedMQTT.sh' script on RPi3b-01_Weewx using cron job every 2mins. ****
//			if(topic === "weather/wDateTimeShort") {
//				$('.date').html(message);
//			}
// **** Date/Time calculated using epoch time supplied by weewx directly. ****
			if(topic === "weather/dateTime") {
				var dt = new Date(parseInt(message) * 1000);
				var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'];
				var date = days[dt.getDay()] + ', '
					+ ('0' + dt.getDate()).slice(-2) + '-'
					+ ('0' + (dt.getMonth()+1)).slice(-2) + '-'
					+ dt.getFullYear();
				var hours = dt.getHours();
				var minutes = ('0' + dt.getMinutes()).slice(-2);
				var ampm = hours >= 12 ? 'pm' : 'am';
				hours = hours % 12;
				hours = hours ? hours : 12; // the hour '0' should be '12';
				hours = ('0' + hours).slice(-2);
				var date = date + '  ' + hours + ':' + minutes + ' ' + ampm;
				console.log(date);
				$('.date').html(date);
			}
			if(topic === "weather/inTemp_C") {
				message = message + "°C";
				$('.inTemp').html(message);
			}
			if(topic === "weather/outTemp_C") {
				message = message + "°C";
				$('.outTemp').html(message);
			}
			if(topic === "weather/inHumidity") {
// Following 2 lines rounds 'float' to 'integer'.
//				message = parseFloat(message);
//				message = Math.round(message);
				message = message + "%";
				$('.inHum').html(message);
			}
			if(topic === "weather/outHumidity") {
// Following 2 lines rounds 'float' to 'integer'.
//				message = parseFloat(message);
//				message = Math.round(message);
				message = message + "%";
				$('.outHum').html(message);
			}
			if(topic === "weather/rainRate_cm_per_hour") {
				message = (parseFloat(message) * 10);
				message = message.toFixed(1);
				message = message + " mm/hr";
				$('.rainRate').html(message);
			}
			if(topic === "weather/dayRain_cm") {
				message = (parseFloat(message) * 10);
				message = message.toFixed(1);
				message = message + " mm";
				$('.rainToday').html(message);
			}
		}

		function onConnect() {
		// Once a connection has been made, make a subscription and send a message.
			console.log("Connected ");
//			mqtt.subscribe("weather/wDateTimeShort");
			mqtt.subscribe("weather/dateTime");
			mqtt.subscribe("weather/inTemp_C");
			mqtt.subscribe("weather/outTemp_C");
			mqtt.subscribe("weather/inHumidity");
			mqtt.subscribe("weather/outHumidity");
			mqtt.subscribe("weather/rainRate_cm_per_hour");
			mqtt.subscribe("weather/dayRain_cm");
		}

		function MQTTconnect() {
			console.log("connecting to " + host + ":" + port);
//			var x = Math.floor(Math.random() * 10000);
//			var clientid = "orderform-"+x;
//			mqtt = new Paho.MQTT.Client(host, port, clientid);
			mqtt = new Paho.MQTT.Client(host, port, "");
			var options = {timeout: 3, onSuccess: onConnect, onFailure: onFailure,};
			mqtt.onMessageArrived = onMessageArrived
			mqtt.connect(options);		//connect
		}
	</script>
</head>

<body>
<script>
	MQTTconnect();
	setInterval(MQTTconnect, 600000);
</script>

	<div class="stats_header" style="border-width: thin;">Weather Updated: <span class="date"></span></div>

	<table style="background: rgba(255, 255, 204, .65);" width="100%" title="Current Weather Conditions">
		<table width="50%" style="float: left; background: rgba(255, 255, 204, .65);">
			<tr>
				<td class="stats_label" width="50%" nowrap>In Temp:</td>
				<td class="stats_data" nowrap><span class="inTemp"></span></td>
			</tr>
			<tr>
				<td class="stats_label" width="50%" nowrap>In Humidity:</td>
				<td class="stats_data" nowrap><span class="inHum"></span></td>
			</tr>
			<tr>
				<td class="stats_label" width="50%" nowrap>Rain Rate:</td>
				<td class="stats_data" nowrap><span class="rainRate"></span></td>
			</tr>
		</table>

		<table width="50%" style="float: right; background: rgba(255, 255, 204, .65);">
<!--		<table style="background: rgba(255, 255, 204, 0.5);" width="50%" style="float: right"> -->
			<tr>
				<td class="stats_label" width="50%" nowrap>Out Temp:</td>
				<td class="stats_data" nowrap><span class="outTemp"></span></td>
			</tr>
			<tr>
				<td class="stats_label" width="50%" nowrap>Out Humidity:</td>
				<td class="stats_data" nowrap><span class="outHum"></span></td>
			</tr>
			<tr>
				<td class="stats_label" width="50%" nowrap>Rain Today:</td>
				<td class="stats_data" nowrap><span class="rainToday"></span></td>
			</tr>
		</table>
	</table>
</body>
</html>

